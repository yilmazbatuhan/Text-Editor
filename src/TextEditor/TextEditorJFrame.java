/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TextEditor;

import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

public class TextEditorJFrame extends javax.swing.JFrame {

    /**
     * Creates new form TextEditorJFrame
     */
    //nesnelerin deklerasyon işlemleri
    Transposition tp;
    Undo undo;

    Highlighter.HighlightPainter red = new DefaultHighlighter.DefaultHighlightPainter(Color.RED);
    Highlighter.HighlightPainter green = new DefaultHighlighter.DefaultHighlightPainter(Color.GREEN);
    Highlighter.HighlightPainter darkGreen = new DefaultHighlighter.DefaultHighlightPainter(Color.GREEN.darker());
    Highlighter h1;

    //dosya
    dosyaIslemleriGenel dosyaIslemii;
    dosyaIslemleriGenel dosyaIslemii1;
    dosyaIslemleriGenel dosyaIslemii2;
    dosyaIslemleriGenel dosyaIslemii3;
    JFileChooser fileChooser;
    String textString;    //textAreadadaki yazılanların en son kaydedilmiş halini tutacağımız String

    KelimeIslem kelimeIslem; //bul ve değiştir işlemleri için

    Stack<String> undoStack = new Stack<>();

    public TextEditorJFrame() {
        initComponents();
        myInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        kelimeBulText = new javax.swing.JTextField();
        kelimeDegistirText = new javax.swing.JTextField();
        kelimeBulButton = new javax.swing.JButton();
        kelimeDegistirButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        dosyaAcMenuItem = new javax.swing.JMenuItem();
        dosyaKapatMenuItem = new javax.swing.JMenuItem();
        dosyaKaydetMenuItem = new javax.swing.JMenuItem();
        dosyaOlusturMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        geriAlMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        transpositionCheckMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textAreaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(textArea);

        kelimeBulText.setName(""); // NOI18N

        kelimeBulButton.setText("Kelime Bul");
        kelimeBulButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kelimeBulButtonActionPerformed(evt);
            }
        });

        kelimeDegistirButton.setText("Kelime Değiştir");
        kelimeDegistirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kelimeDegistirButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("Dosya");

        dosyaAcMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        dosyaAcMenuItem.setText("Dosya Aç");
        dosyaAcMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dosyaAcMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(dosyaAcMenuItem);

        dosyaKapatMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        dosyaKapatMenuItem.setText("Dosya Kapat");
        dosyaKapatMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dosyaKapatMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(dosyaKapatMenuItem);

        dosyaKaydetMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        dosyaKaydetMenuItem.setText("Dosya Kaydet");
        dosyaKaydetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dosyaKaydetMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(dosyaKaydetMenuItem);

        dosyaOlusturMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        dosyaOlusturMenuItem.setText("Dosya Oluştur");
        dosyaOlusturMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dosyaOlusturMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(dosyaOlusturMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Düzenle");

        geriAlMenuItem.setText("Geri Al");
        geriAlMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geriAlMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(geriAlMenuItem);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Hata Kontrol");
        jMenu3.setToolTipText("");

        transpositionCheckMenuItem.setText("Single Transposition Kontrol");
        transpositionCheckMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transpositionCheckMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(transpositionCheckMenuItem);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 195, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(kelimeBulText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kelimeBulButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(kelimeDegistirText, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kelimeDegistirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kelimeBulText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kelimeBulButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kelimeDegistirButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(kelimeDegistirText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //kullanılan nesnelerin Initialize edilmesi
    public void myInitComponents() {

        undo = new Undo(textArea, undoStack);
        h1 = textArea.getHighlighter();

        //dosya işlemleri
        dosyaIslemii = new dosyaIslemleriGenel(new dosyaAc(textArea, fileChooser, textString));
        dosyaIslemii1 = new dosyaIslemleriGenel(new dosyaKapat(textArea, fileChooser, textString));
        dosyaIslemii2 = new dosyaIslemleriGenel(new dosyaKaydet(textArea, fileChooser, textString));
        dosyaIslemii3 = new dosyaIslemleriGenel(new dosyaOlustur(textArea, fileChooser, textString));
        fileChooser = null;
        textString = null;

        kelimeIslem = new KelimeIslem(); // bul ve değiştir işlemleri için
    }

    private void textAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyPressed
        //karakter olmayan tuşlara basıldığında stack'e ekleme yapılmıyor.
        if (!(String.valueOf(evt.getKeyChar()).equals("") || String.valueOf(evt.getKeyChar()).equals("￿"))) {
            h1.removeAllHighlights(); //metinde highlight yapılmış kelimeler varsa highlight'lar siliniyor

            undo.addTextMethod();
        }
    }//GEN-LAST:event_textAreaKeyPressed

    private void dosyaAcMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dosyaAcMenuItemActionPerformed
        dosyaIslemii = new dosyaIslemleriGenel(new dosyaAc(textArea, fileChooser, textString));
        dosyaIslemii.dosyaIslemleriniYap();
        textString = dosyaIslemii.retString();
        fileChooser = dosyaIslemii.retFileChooser();
        textArea = dosyaIslemii.retTextArea();
    }//GEN-LAST:event_dosyaAcMenuItemActionPerformed

    private void dosyaKapatMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dosyaKapatMenuItemActionPerformed
        dosyaIslemii1 = new dosyaIslemleriGenel(new dosyaKapat(textArea, fileChooser, textString));
        dosyaIslemii1.dosyaIslemleriniYap();
        textString = dosyaIslemii1.retString();
        fileChooser = dosyaIslemii1.retFileChooser();
        textArea = dosyaIslemii1.retTextArea();
    }//GEN-LAST:event_dosyaKapatMenuItemActionPerformed

    private void dosyaKaydetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dosyaKaydetMenuItemActionPerformed
        dosyaIslemii2 = new dosyaIslemleriGenel(new dosyaKaydet(textArea, fileChooser, textString));
        dosyaIslemii2.dosyaIslemleriniYap();
        textString = dosyaIslemii2.retString();
        fileChooser = dosyaIslemii2.retFileChooser();
        textArea = dosyaIslemii2.retTextArea();
    }//GEN-LAST:event_dosyaKaydetMenuItemActionPerformed

    private void dosyaOlusturMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dosyaOlusturMenuItemActionPerformed
        dosyaIslemii3 = new dosyaIslemleriGenel(new dosyaOlustur(textArea, fileChooser, textString));
        dosyaIslemii3.dosyaIslemleriniYap();
        textString = dosyaIslemii3.retString();
        fileChooser = dosyaIslemii3.retFileChooser();
        textArea = dosyaIslemii3.retTextArea();
    }//GEN-LAST:event_dosyaOlusturMenuItemActionPerformed

    private void kelimeBulButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kelimeBulButtonActionPerformed
        kelimeIslem.durumuDegistir(new KelimeBul(textArea, kelimeBulText.getText()));
        kelimeIslem.islemiUygula();
    }//GEN-LAST:event_kelimeBulButtonActionPerformed

    private void kelimeDegistirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kelimeDegistirButtonActionPerformed
        kelimeIslem.durumuDegistir(new KelimeDegistir(textArea, undoStack, kelimeBulText.getText(), kelimeDegistirText.getText()));
        kelimeIslem.islemiUygula();
    }//GEN-LAST:event_kelimeDegistirButtonActionPerformed

    private void geriAlMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geriAlMenuItemActionPerformed
        undoKomut undoKomut = new undoKomut(undo);
        addTextKomut addTextKomut = new addTextKomut(undo);
        Kontrol kontrol = new Kontrol(undoKomut, addTextKomut);
        kontrol.geriAlMetod2();

    }//GEN-LAST:event_geriAlMenuItemActionPerformed

    private void transpositionCheckMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transpositionCheckMenuItemActionPerformed
        try {
            tp = new Transposition();  //Transposition classında oluşturduğumuz arraylistlere erişim saglamak için bu classtan tp nesnesi olusturuldu .
        } catch (IOException ex) {
            Logger.getLogger(TextEditorJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        Iterator<String> wordsListIterator; //words dosyasındaki ve notepad'deki kelimelerin olduğu koleksiyonları dolaşmak için iterator oluşturuldu.
        Iterator<Integer> highlightsIterator; //highligt işlemi için kullanılacak olan koleksiyonların dolaşımı için iterator

        int index = 0;
        ArrayList<Integer> gHighlights = new ArrayList<>();         // doğru kabul edilen kelimelerin highlight edilmesi için gereken indexleri tutan arraylist
        ArrayList<Integer> dgHighlights = new ArrayList<>();        // single transposition bulunan kelimelerin highlight edilmesi için gereken indexleri tutan arraylist
        ArrayList<Integer> rHighlights = new ArrayList<>();         // yanlış kabul edilen kelimelerin highlight edilmesi için gereken indexleri tutan arraylist
        Highlighter h2 = textArea.getHighlighter();
        h2.removeAllHighlights();
        String textAreaStr = textArea.getText().toLowerCase();

        String[] words = textAreaStr.split("[\\s.,'\\)\\(]");         // kelimeleri belirli noktalama işaretlerine göre ayırdık .

        for (String word : words) {                                     //textArea'ya yazılan kelimeler tek tek for döngüsüne girip kontrol ediliyor .

            boolean condition = true;
            int wordLength = word.length();
            if (word.matches(".*\\d.*")) {                             //eğer bir sayı ile karşılaşırsa kontrol etmeden doğru kabul ediliyor .

                gHighlights.add(index);
                index += wordLength + 1;
                gHighlights.add(index);

            } else if (wordLength == 0) {
                index += 1;
            } else if (0 < wordLength && wordLength < 3) {

                rHighlights.add(index);
                index += wordLength + 1;
                rHighlights.add(index);

            } else if (wordLength == 3 & condition) {                             //gelen kelimenin uzunluğuna göre ilgili koşul çalışıyor .            
                //iterator ile kelimelerin dolaşılması kelimenin words'te olup olmamasına bakılması
                wordsListIterator = tp.lists.get(0).iterator();
                while (wordsListIterator.hasNext()) {
                    String currentWord = wordsListIterator.next();
                    if (currentWord.equals(word)) {                                     // sırayla kontrol ediliyor .
                        // eğer textArea'daki kelime arraylistte varsa doğru kabul edilip textAreadaki sonraki kelime
                        gHighlights.add(index);                                 //kontrol edilmeye başlanıyor .
                        index += wordLength + 1;
                        gHighlights.add(index);

                        condition = false;
                        break;
                    }
                }

                if (condition) {                                                //eğer bu kelime word.txt de yoksa transposition var mı diye kontrol ediliyor .
                    // aynı list üzerinde iterasyon işleminin tekrar yapılabilmesi için 
                    wordsListIterator = tp.lists.get(0).iterator();
                    loop1:
                    while (wordsListIterator.hasNext()) { //iterator ile kelimelerin dolaşılması transposition işlemlerinin yapılması
                        String currentWord = wordsListIterator.next();
                        for (int i = 0; i < currentWord.length() - 1; i++) {

                            if (word.charAt(i) == currentWord.charAt(i + 1) & word.charAt(i + 1) == currentWord.charAt(i)) { // transposition'u ardışık harflerde aradık . 
                                //Sadece ardışık harflerdeki single transposition aranıyor .       
                                char[] wordTemp = word.toCharArray();
                                char[] strTemp = currentWord.toCharArray();
                                wordTemp[i] = strTemp[i];
                                wordTemp[i + 1] = strTemp[i + 1];

                                String tWord = String.valueOf(wordTemp);        //eger transposition varsa kelimenin kalanı da kontrol ediliyor , sonuca göre dogru kabul ediliyor .

                                if (tWord.equals(currentWord)) {

                                    undo.addTextMethod();
                                    textArea.setText(textArea.getText().replace(word, tWord)); //textAreadaki metindeki kelime doğru haliyle değiştiriliyor .

                                    dgHighlights.add(index);                                //transposition olan kelime koyu yeşil ile highlight edilecek .
                                    index += wordLength + 1;                                //gerekli indexlerin tutuldugu liste
                                    dgHighlights.add(index);

                                    condition = false;
                                    break loop1;
                                }
                            }
                        }
                    }

                    if (condition) {                                            //eğer diğer 2 döngüye girmediyse demekki kelimemiz word.txtde bulunmuyor .
                        //ve single transposition yok . Bu durumda bu kelime yanlış kabul ediliyor 
                        rHighlights.add(index);                                 //ve highlight edilmek üzere ilgili indexler kaydediliyor .
                        index += wordLength + 1;                                //yanlıs kelimeler kırmızı renkle highlight ediliyor .
                        rHighlights.add(index);
                        condition = false;
                    }
                }
            } else if (wordLength == 4 & condition) {

                //iterator ile kelimelerin dolaşılması kelimenin words'te olup olmamasına bakılması
                wordsListIterator = tp.lists.get(1).iterator();
                while (wordsListIterator.hasNext()) {
                    String currentWord = wordsListIterator.next();
                    if (currentWord.equals(word)) {                                     // sırayla kontrol ediliyor .
                        // eğer textArea'daki kelime arraylistte varsa doğru kabul edilip textAreadaki sonraki kelime
                        gHighlights.add(index);                                 //kontrol edilmeye başlanıyor .
                        index += wordLength + 1;
                        gHighlights.add(index);

                        condition = false;
                        break;
                    }
                }

                if (condition) {
                    wordsListIterator = tp.lists.get(1).iterator();
                    loop1:
                    while (wordsListIterator.hasNext()) { //iterator ile kelimelerin dolaşılması transposition işlemlerinin yapılması
                        String currentWord = wordsListIterator.next();
                        for (int i = 0; i < currentWord.length() - 1; i++) {

                            if (word.charAt(i) == currentWord.charAt(i + 1) & word.charAt(i + 1) == currentWord.charAt(i)) { // transposition'u ardışık harflerde aradık . 
                                //Sadece ardışık harflerdeki single transposition aranıyor .       
                                char[] wordTemp = word.toCharArray();
                                char[] strTemp = currentWord.toCharArray();
                                wordTemp[i] = strTemp[i];
                                wordTemp[i + 1] = strTemp[i + 1];

                                String tWord = String.valueOf(wordTemp);        //eger transposition varsa kelimenin kalanı da kontrol ediliyor , sonuca göre dogru kabul ediliyor .

                                if (tWord.equals(currentWord)) {

                                    undo.addTextMethod();
                                    textArea.setText(textArea.getText().replace(word, tWord)); //textAreadaki metindeki kelime doğru haliyle değiştiriliyor .

                                    dgHighlights.add(index);                                //transposition olan kelime koyu yeşil ile highlight edilecek .
                                    index += wordLength + 1;                                //gerekli indexlerin tutuldugu liste
                                    dgHighlights.add(index);

                                    condition = false;
                                    break loop1;
                                }
                            }
                        }
                    }
                    if (condition) {

                        rHighlights.add(index);
                        index += wordLength + 1;
                        rHighlights.add(index);
                        condition = false;
                    }
                }
            } else if (wordLength == 5 & condition) {

                //iterator ile kelimelerin dolaşılması kelimenin words'te olup olmamasına bakılması
                wordsListIterator = tp.lists.get(2).iterator();
                while (wordsListIterator.hasNext()) {
                    String currentWord = wordsListIterator.next();
                    if (currentWord.equals(word)) {                                     // sırayla kontrol ediliyor .
                        // eğer textArea'daki kelime arraylistte varsa doğru kabul edilip textAreadaki sonraki kelime
                        gHighlights.add(index);                                 //kontrol edilmeye başlanıyor .
                        index += wordLength + 1;
                        gHighlights.add(index);

                        condition = false;
                        break;
                    }
                }

                if (condition) {
                    wordsListIterator = tp.lists.get(2).iterator();
                    loop1:
                    while (wordsListIterator.hasNext()) {   //iterator ile kelimelerin dolaşılması transposition işlemlerinin yapılması
                        String currentWord = wordsListIterator.next();
                        for (int i = 0; i < currentWord.length() - 1; i++) {

                            if (word.charAt(i) == currentWord.charAt(i + 1) & word.charAt(i + 1) == currentWord.charAt(i)) { // transposition'u ardışık harflerde aradık . 
                                //Sadece ardışık harflerdeki single transposition aranıyor .       
                                char[] wordTemp = word.toCharArray();
                                char[] strTemp = currentWord.toCharArray();
                                wordTemp[i] = strTemp[i];
                                wordTemp[i + 1] = strTemp[i + 1];

                                String tWord = String.valueOf(wordTemp);        //eger transposition varsa kelimenin kalanı da kontrol ediliyor , sonuca göre dogru kabul ediliyor .

                                if (tWord.equals(currentWord)) {

                                    undo.addTextMethod();
                                    textArea.setText(textArea.getText().replace(word, tWord)); //textAreadaki metindeki kelime doğru haliyle değiştiriliyor .

                                    dgHighlights.add(index);                                //transposition olan kelime koyu yeşil ile highlight edilecek .
                                    index += wordLength + 1;                                //gerekli indexlerin tutuldugu liste
                                    dgHighlights.add(index);

                                    condition = false;
                                    break loop1;
                                }
                            }
                        }
                    }
                    if (condition) {

                        rHighlights.add(index);
                        index += wordLength + 1;
                        rHighlights.add(index);
                        condition = false;
                    }
                }
            } else if (wordLength == 6 & condition) {

                //iterator ile kelimelerin dolaşılması kelimenin words'te olup olmamasına bakılması
                wordsListIterator = tp.lists.get(3).iterator();
                while (wordsListIterator.hasNext()) {
                    String currentWord = wordsListIterator.next();
                    if (currentWord.equals(word)) {                                     // sırayla kontrol ediliyor .
                        // eğer textArea'daki kelime arraylistte varsa doğru kabul edilip textAreadaki sonraki kelime
                        gHighlights.add(index);                                 //kontrol edilmeye başlanıyor .
                        index += wordLength + 1;
                        gHighlights.add(index);

                        condition = false;
                        break;
                    }
                }
                if (condition) {
                    wordsListIterator = tp.lists.get(3).iterator();
                    loop1:
                    while (wordsListIterator.hasNext()) {   //iterator ile kelimelerin dolaşılması transposition işlemlerinin yapılması
                        String currentWord = wordsListIterator.next();
                        for (int i = 0; i < currentWord.length() - 1; i++) {

                            if (word.charAt(i) == currentWord.charAt(i + 1) & word.charAt(i + 1) == currentWord.charAt(i)) { // transposition'u ardışık harflerde aradık . 
                                //Sadece ardışık harflerdeki single transposition aranıyor .       
                                char[] wordTemp = word.toCharArray();
                                char[] strTemp = currentWord.toCharArray();
                                wordTemp[i] = strTemp[i];
                                wordTemp[i + 1] = strTemp[i + 1];

                                String tWord = String.valueOf(wordTemp);        //eger transposition varsa kelimenin kalanı da kontrol ediliyor , sonuca göre dogru kabul ediliyor .

                                if (tWord.equals(currentWord)) {

                                    undo.addTextMethod();
                                    textArea.setText(textArea.getText().replace(word, tWord)); //textAreadaki metindeki kelime doğru haliyle değiştiriliyor .

                                    dgHighlights.add(index);                                //transposition olan kelime koyu yeşil ile highlight edilecek .
                                    index += wordLength + 1;                                //gerekli indexlerin tutuldugu liste
                                    dgHighlights.add(index);

                                    condition = false;
                                    break loop1;
                                }
                            }
                        }
                    }
                    if (condition) {

                        rHighlights.add(index);
                        index += wordLength + 1;
                        rHighlights.add(index);
                        condition = false;
                    }
                }
            } else if (wordLength == 7 & condition) {

                //iterator ile kelimelerin dolaşılması kelimenin words'te olup olmamasına bakılması
                wordsListIterator = tp.lists.get(4).iterator();
                while (wordsListIterator.hasNext()) {
                    String currentWord = wordsListIterator.next();
                    if (currentWord.equals(word)) {                                     // sırayla kontrol ediliyor .
                        // eğer textArea'daki kelime arraylistte varsa doğru kabul edilip textAreadaki sonraki kelime
                        gHighlights.add(index);                                 //kontrol edilmeye başlanıyor .
                        index += wordLength + 1;
                        gHighlights.add(index);

                        condition = false;
                        break;
                    }
                }
                if (condition) {
                    wordsListIterator = tp.lists.get(4).iterator();
                    loop1:
                    while (wordsListIterator.hasNext()) {   //iterator ile kelimelerin dolaşılması transposition işlemlerinin yapılması
                        String currentWord = wordsListIterator.next();
                        for (int i = 0; i < currentWord.length() - 1; i++) {

                            if (word.charAt(i) == currentWord.charAt(i + 1) & word.charAt(i + 1) == currentWord.charAt(i)) { // transposition'u ardışık harflerde aradık . 
                                //Sadece ardışık harflerdeki single transposition aranıyor .       
                                char[] wordTemp = word.toCharArray();
                                char[] strTemp = currentWord.toCharArray();
                                wordTemp[i] = strTemp[i];
                                wordTemp[i + 1] = strTemp[i + 1];

                                String tWord = String.valueOf(wordTemp);        //eger transposition varsa kelimenin kalanı da kontrol ediliyor , sonuca göre dogru kabul ediliyor .

                                if (tWord.equals(currentWord)) {

                                    undo.addTextMethod();
                                    textArea.setText(textArea.getText().replace(word, tWord)); //textAreadaki metindeki kelime doğru haliyle değiştiriliyor .

                                    dgHighlights.add(index);                                //transposition olan kelime koyu yeşil ile highlight edilecek .
                                    index += wordLength + 1;                                //gerekli indexlerin tutuldugu liste
                                    dgHighlights.add(index);

                                    condition = false;
                                    break loop1;
                                }
                            }
                        }
                    }
                    if (condition) {

                        rHighlights.add(index);
                        index += wordLength + 1;
                        rHighlights.add(index);
                        condition = false;
                        System.out.println("index:" + index);
                    }
                }
            } else if (wordLength == 8 & condition) {

                //iterator ile kelimelerin dolaşılması kelimenin words'te olup olmamasına bakılması
                wordsListIterator = tp.lists.get(5).iterator();
                while (wordsListIterator.hasNext()) {
                    String currentWord = wordsListIterator.next();
                    if (currentWord.equals(word)) {                                     // sırayla kontrol ediliyor .
                        // eğer textArea'daki kelime arraylistte varsa doğru kabul edilip textAreadaki sonraki kelime
                        gHighlights.add(index);                                 //kontrol edilmeye başlanıyor .
                        index += wordLength + 1;
                        gHighlights.add(index);

                        condition = false;
                        break;
                    }
                }
                if (condition) {
                    wordsListIterator = tp.lists.get(5).iterator();
                    loop1:
                    while (wordsListIterator.hasNext()) {   //iterator ile kelimelerin dolaşılması transposition işlemlerinin yapılması
                        String currentWord = wordsListIterator.next();
                        for (int i = 0; i < currentWord.length() - 1; i++) {

                            if (word.charAt(i) == currentWord.charAt(i + 1) & word.charAt(i + 1) == currentWord.charAt(i)) { // transposition'u ardışık harflerde aradık . 
                                //Sadece ardışık harflerdeki single transposition aranıyor .       
                                char[] wordTemp = word.toCharArray();
                                char[] strTemp = currentWord.toCharArray();
                                wordTemp[i] = strTemp[i];
                                wordTemp[i + 1] = strTemp[i + 1];

                                String tWord = String.valueOf(wordTemp);        //eger transposition varsa kelimenin kalanı da kontrol ediliyor , sonuca göre dogru kabul ediliyor .

                                if (tWord.equals(currentWord)) {

                                    undo.addTextMethod();
                                    textArea.setText(textArea.getText().replace(word, tWord)); //textAreadaki metindeki kelime doğru haliyle değiştiriliyor .

                                    dgHighlights.add(index);                                //transposition olan kelime koyu yeşil ile highlight edilecek .
                                    index += wordLength + 1;                                //gerekli indexlerin tutuldugu liste
                                    dgHighlights.add(index);

                                    condition = false;
                                    break loop1;
                                }
                            }
                        }
                    }
                    if (condition) {
                        rHighlights.add(index);
                        index += wordLength + 1;
                        rHighlights.add(index);
                        condition = false;
                    }
                }
            } else if (wordLength == 9 & condition) {

                //iterator ile kelimelerin dolaşılması kelimenin words'te olup olmamasına bakılması
                wordsListIterator = tp.lists.get(6).iterator();
                while (wordsListIterator.hasNext()) {
                    String currentWord = wordsListIterator.next();
                    if (currentWord.equals(word)) {                                     // sırayla kontrol ediliyor .
                        // eğer textArea'daki kelime arraylistte varsa doğru kabul edilip textAreadaki sonraki kelime
                        gHighlights.add(index);                                 //kontrol edilmeye başlanıyor .
                        index += wordLength + 1;
                        gHighlights.add(index);

                        condition = false;
                        break;
                    }
                }
                if (condition) {
                    wordsListIterator = tp.lists.get(6).iterator();
                    loop1:
                    while (wordsListIterator.hasNext()) {   //iterator ile kelimelerin dolaşılması transposition işlemlerinin yapılması
                        String currentWord = wordsListIterator.next();
                        for (int i = 0; i < currentWord.length() - 1; i++) {

                            if (word.charAt(i) == currentWord.charAt(i + 1) & word.charAt(i + 1) == currentWord.charAt(i)) { // transposition'u ardışık harflerde aradık . 
                                //Sadece ardışık harflerdeki single transposition aranıyor .       
                                char[] wordTemp = word.toCharArray();
                                char[] strTemp = currentWord.toCharArray();
                                wordTemp[i] = strTemp[i];
                                wordTemp[i + 1] = strTemp[i + 1];

                                String tWord = String.valueOf(wordTemp);        //eger transposition varsa kelimenin kalanı da kontrol ediliyor , sonuca göre dogru kabul ediliyor .

                                if (tWord.equals(currentWord)) {

                                    undo.addTextMethod();
                                    textArea.setText(textArea.getText().replace(word, tWord)); //textAreadaki metindeki kelime doğru haliyle değiştiriliyor .

                                    dgHighlights.add(index);                                //transposition olan kelime koyu yeşil ile highlight edilecek .
                                    index += wordLength + 1;                                //gerekli indexlerin tutuldugu liste
                                    dgHighlights.add(index);

                                    condition = false;
                                    break loop1;
                                }
                            }
                        }
                    }
                    if (condition) {

                        rHighlights.add(index);
                        index += wordLength + 1;
                        rHighlights.add(index);
                        condition = false;

                    }
                }
            } else if (wordLength == 10 & condition) {

                //iterator ile kelimelerin dolaşılması kelimenin words'te olup olmamasına bakılması
                wordsListIterator = tp.lists.get(7).iterator();
                while (wordsListIterator.hasNext()) {
                    String currentWord = wordsListIterator.next();
                    if (currentWord.equals(word)) {                                     // sırayla kontrol ediliyor .
                        // eğer textArea'daki kelime arraylistte varsa doğru kabul edilip textAreadaki sonraki kelime
                        gHighlights.add(index);                                 //kontrol edilmeye başlanıyor .
                        index += wordLength + 1;
                        gHighlights.add(index);

                        condition = false;
                        break;
                    }
                }
                if (condition) {
                    wordsListIterator = tp.lists.get(7).iterator();
                    loop1:
                    while (wordsListIterator.hasNext()) {   //iterator ile kelimelerin dolaşılması transposition işlemlerinin yapılması
                        String currentWord = wordsListIterator.next();
                        for (int i = 0; i < currentWord.length() - 1; i++) {

                            if (word.charAt(i) == currentWord.charAt(i + 1) & word.charAt(i + 1) == currentWord.charAt(i)) { // transposition'u ardışık harflerde aradık . 
                                //Sadece ardışık harflerdeki single transposition aranıyor .       
                                char[] wordTemp = word.toCharArray();
                                char[] strTemp = currentWord.toCharArray();
                                wordTemp[i] = strTemp[i];
                                wordTemp[i + 1] = strTemp[i + 1];

                                String tWord = String.valueOf(wordTemp);        //eger transposition varsa kelimenin kalanı da kontrol ediliyor , sonuca göre dogru kabul ediliyor .

                                if (tWord.equals(currentWord)) {

                                    undo.addTextMethod();
                                    textArea.setText(textArea.getText().replace(word, tWord)); //textAreadaki metindeki kelime doğru haliyle değiştiriliyor .

                                    dgHighlights.add(index);                                //transposition olan kelime koyu yeşil ile highlight edilecek .
                                    index += wordLength + 1;                                //gerekli indexlerin tutuldugu liste
                                    dgHighlights.add(index);

                                    condition = false;
                                    break loop1;
                                }

                            }
                        }
                    }
                    if (condition) {

                        rHighlights.add(index);
                        index += wordLength + 1;
                        rHighlights.add(index);
                        condition = false;

                    }
                }
            } else if (wordLength > 10 & condition) {
                //iterator ile kelimelerin dolaşılması kelimenin words'te olup olmamasına bakılması
                wordsListIterator = tp.lists.get(8).iterator();
                while (wordsListIterator.hasNext()) {
                    String currentWord = wordsListIterator.next();
                    if (currentWord.equals(word)) {                                     // sırayla kontrol ediliyor .
                        // eğer textArea'daki kelime arraylistte varsa doğru kabul edilip textAreadaki sonraki kelime
                        gHighlights.add(index);                                 //kontrol edilmeye başlanıyor .
                        index += wordLength + 1;
                        gHighlights.add(index);

                        condition = false;
                        break;
                    }
                }
                if (condition) {
                    wordsListIterator = tp.lists.get(8).iterator();
                    loop1:
                    while (wordsListIterator.hasNext()) {   //iterator ile kelimelerin dolaşılması transposition işlemlerinin yapılması
                        String currentWord = wordsListIterator.next();
                        for (int i = 0; i < currentWord.length() - 1; i++) {

                            if (word.charAt(i) == currentWord.charAt(i + 1) & word.charAt(i + 1) == currentWord.charAt(i)) { // transposition'u ardışık harflerde aradık . 
                                //Sadece ardışık harflerdeki single transposition aranıyor .       
                                char[] wordTemp = word.toCharArray();
                                char[] strTemp = currentWord.toCharArray();
                                wordTemp[i] = strTemp[i];
                                wordTemp[i + 1] = strTemp[i + 1];

                                String tWord = String.valueOf(wordTemp);        //eger transposition varsa kelimenin kalanı da kontrol ediliyor , sonuca göre dogru kabul ediliyor .

                                if (tWord.equals(currentWord)) {

                                    undo.addTextMethod();
                                    textArea.setText(textArea.getText().replace(word, tWord)); //textAreadaki metindeki kelime doğru haliyle değiştiriliyor .

                                    dgHighlights.add(index);                                //transposition olan kelime koyu yeşil ile highlight edilecek .
                                    index += wordLength + 1;                                //gerekli indexlerin tutuldugu liste
                                    dgHighlights.add(index);

                                    condition = false;
                                    break loop1;
                                }

                            }
                        }
                    }
                    if (condition) {

                        rHighlights.add(index);
                        index += wordLength + 1;
                        rHighlights.add(index);
                        condition = false;

                    }
                }

            }
        }

        //koyu yeşil olarak highlight edilecek yerlerin iterator ile dolaşılarak highlight edilmesi
        highlightsIterator = dgHighlights.iterator();
        while (highlightsIterator.hasNext()) {
            int currentHighligts = highlightsIterator.next();
            try {
                h2.addHighlight(currentHighligts, highlightsIterator.next() - 1, darkGreen); // koyu yeşil highlight işlemi (singletransposition kelimeler )

            } catch (BadLocationException ex) {
                Logger.getLogger(TextEditorJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //kırmızı olarak highlight edilecek yerlerin iterator ile dolaşılarak highlight edilmesi
        highlightsIterator = rHighlights.iterator();
        while (highlightsIterator.hasNext()) {
            int currentHighligts = highlightsIterator.next();
            try {
                h2.addHighlight(currentHighligts, highlightsIterator.next() - 1, red); // koyu yeşil highlight işlemi (singletransposition kelimeler )

            } catch (BadLocationException ex) {
                Logger.getLogger(TextEditorJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //yeşil olarak highlight edilecek yerlerin iterator ile dolaşılarak highlight edilmesi
        highlightsIterator = gHighlights.iterator();
        while (highlightsIterator.hasNext()) {
            int currentHighligts = highlightsIterator.next();
            try {
                h2.addHighlight(currentHighligts, highlightsIterator.next() - 1, green); // koyu yeşil highlight işlemi (singletransposition kelimeler )

            } catch (BadLocationException ex) {
                Logger.getLogger(TextEditorJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_transpositionCheckMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextEditorJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem dosyaAcMenuItem;
    private javax.swing.JMenuItem dosyaKapatMenuItem;
    private javax.swing.JMenuItem dosyaKaydetMenuItem;
    private javax.swing.JMenuItem dosyaOlusturMenuItem;
    private javax.swing.JMenuItem geriAlMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton kelimeBulButton;
    private javax.swing.JTextField kelimeBulText;
    private javax.swing.JButton kelimeDegistirButton;
    private javax.swing.JTextField kelimeDegistirText;
    private javax.swing.JTextArea textArea;
    private javax.swing.JMenuItem transpositionCheckMenuItem;
    // End of variables declaration//GEN-END:variables

    boolean isSaved() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
